[
  {
    "objectID": "layers.html",
    "href": "layers.html",
    "title": "layers",
    "section": "",
    "text": "These layers allow use to have neurons of on layer connected to other layer without any breaks. Most widely used.\n\nsource\n\n\n\n Dense (in_features:int, out_features:int)\n\nFully connected layer\n\n\n\n\nType\nDetails\n\n\n\n\nin_features\nint\nThe number of features.\n\n\nout_features\nint\nThe number of neurons to have for the layer.\n\n\n\n\n\nA layer can be created by\n\nlayer = Dense(5, 3)\nlayer\n\nDense(in_features=5, out_features=3)\n\n\nlayer parameters can be accessed by layer.weigths and layer.biases variables\n\nsource\n\n\n\n\n\n Dense.forward (X:numpy.ndarray)\n\nForward input X through the layer\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nndarray\nshape of (batch_size, in_features) if a single batch is passed it has to be of shape (1, in_features).\n\n\nReturns\nndarray\nthe output of the layer\n\n\n\n\n\nData can be passed through with\n\nX = [[2.0, 3.0, 4.0, 5.0, 6.0]] # of shape (1, 5)\nlayer.forward(X)\n\nlayer.output\n\narray([[ 8.47999191, -6.8053504 , -3.19016013]])\n\n\nand output can be accessed by layer.output variable after the forward pass"
  },
  {
    "objectID": "layers.html#fully-connected-layers",
    "href": "layers.html#fully-connected-layers",
    "title": "layers",
    "section": "",
    "text": "These layers allow use to have neurons of on layer connected to other layer without any breaks. Most widely used.\n\nsource\n\n\n\n Dense (in_features:int, out_features:int)\n\nFully connected layer\n\n\n\n\nType\nDetails\n\n\n\n\nin_features\nint\nThe number of features.\n\n\nout_features\nint\nThe number of neurons to have for the layer.\n\n\n\n\n\nA layer can be created by\n\nlayer = Dense(5, 3)\nlayer\n\nDense(in_features=5, out_features=3)\n\n\nlayer parameters can be accessed by layer.weigths and layer.biases variables\n\nsource\n\n\n\n\n\n Dense.forward (X:numpy.ndarray)\n\nForward input X through the layer\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nndarray\nshape of (batch_size, in_features) if a single batch is passed it has to be of shape (1, in_features).\n\n\nReturns\nndarray\nthe output of the layer\n\n\n\n\n\nData can be passed through with\n\nX = [[2.0, 3.0, 4.0, 5.0, 6.0]] # of shape (1, 5)\nlayer.forward(X)\n\nlayer.output\n\narray([[ 8.47999191, -6.8053504 , -3.19016013]])\n\n\nand output can be accessed by layer.output variable after the forward pass"
  },
  {
    "objectID": "layers.html#data-generators",
    "href": "layers.html#data-generators",
    "title": "layers",
    "section": "Data generators",
    "text": "Data generators\nArtifical data generators can be usefull for quick testing and debuging purposes.\n\nsource\n\nspiral_data\n\n spiral_data (samples:int=100, classes:int=3, noice_fact=None)\n\nCreate a 2D spiral for each class\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsamples\nint\n100\nnumber of points per class\n\n\nclasses\nint\n3\nnumber of classes\n\n\nnoice_fact\nNoneType\nNone\nadd noice to the spiral angles.\n\n\nReturns\ntuple\n\nX and y arraysâ€™s\n\n\n\nThis code is inspired by this course\n\nExample\n\nX, y = spiral_data()\n\n# Test for number of data points.\nassert (X.shape[0] == 100 * 3) and (y.shape[0] == 100 * 3)\n\nplt.scatter(X[:, 0], X[:, 1], c=y)\nplt.show()\n\n\n\n\nwe can see three spirals, now increase the noice in the angles\n\nX, y = spiral_data(noice_fact=2.5)\n\nplt.scatter(X[:, 0], X[:, 1], c=y)\nplt.show()"
  },
  {
    "objectID": "layers.html#example-usage",
    "href": "layers.html#example-usage",
    "title": "layers",
    "section": "Example usage",
    "text": "Example usage\nMake data with researchai.nn.layers.spiral_data and plot it\nAdd some noice to spirals by increasing the noice_fact\n\nX, y = spiral_data(noice_fact=2.5)\n\nplt.scatter(X[:, 0], X[:, 1], c=y)\nplt.show()\n\n\n\n\nCreate a researchai.nn.layers.Dense layer and forward pass through it\n\ndense = Dense(2, 3)\n\ndense.forward(X)[:5]\n\narray([[-0.32104264, -0.86396488, -2.12740994],\n       [-0.32975848, -0.86461072, -2.13622016],\n       [-0.34353207, -0.86936126, -2.14830142],\n       [-0.34610823, -0.87912212, -2.14618081],\n       [-0.36716138, -0.88181375, -2.16690324]])"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ResearchAI",
    "section": "",
    "text": "The source code is written using jupyter notebooks so go to nbs dir and start from 00_ prefix file. The code is written in that order."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "ResearchAI",
    "section": "Install",
    "text": "Install\n\nInstall with pypi\npip install researchai\n\n\nInstall from source\ngit clone https://github.com/sampath017/researchai.git && cd researchai\nthe source code is in researchai dir and it was produced by notebooks in the nbs dir by using nbdev."
  },
  {
    "objectID": "index.html#reading-source",
    "href": "index.html#reading-source",
    "title": "ResearchAI",
    "section": "",
    "text": "The source code is written using jupyter notebooks so go to nbs dir and start from 00_ prefix file. The code is written in that order."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "ResearchAI",
    "section": "Usage",
    "text": "Usage\n\nfrom researchai.nn.layers import *"
  },
  {
    "objectID": "index.html#reading-source-code",
    "href": "index.html#reading-source-code",
    "title": "ResearchAI",
    "section": "",
    "text": "The source code is written using jupyter notebooks so go to nbs dir and start from 00_ prefix file. The code is written in that order."
  }
]